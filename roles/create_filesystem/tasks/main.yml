---

- name: Open LUKS container on /dev/{{ disk_scheme.device }}{{ disk_scheme.crypt_part.partition }}
  community.crypto.luks_device:
    device: "/dev/{{ disk_scheme.device }}{{ disk_scheme.crypt_part.partition }}"
    state: "opened"
    name: "{{ crypt_mount_name }}"
    passphrase: "{{ crypto_become_pass }}"

- name: Create a volume group on /dev/{{ disk_scheme.device }}{{ disk_scheme.crypt_part.partition }}
  community.general.lvg:
    vg: "{{ crypt_volume_group_name }}"
    pvs: "/dev/mapper/{{ crypt_mount_name }}"

- name: Create swap logical volume
  community.general.lvol:
    vg: "{{ crypt_volume_group_name }}"
    lv: swap
    size: "{{ crypt_swap_size }}g"
  register: create_swap_lv

- name: Run mkswap for swap LV
  ansible.builtin.command: mkswap "/dev/{{ crypt_volume_group_name }}/swap"
  when: create_swap_lv.changed is true
  register: mkswap

- name: Create root logical volume
  community.general.lvol:
    vg: "{{ crypt_volume_group_name }}"
    lv: root
    size: "{{ crypt_root_size }}g"

- name: Create a ext4 filesystem on root
  ansible.builtin.filesystem:
    fstype: ext4
    dev: "/dev/{{ crypt_volume_group_name }}/root"

- name: Determine if home LV exists for idempotency
  ansible.builtin.shell: lsblk --raw -n | grep "{{ crypt_volume_group_name }}-home"
  register: lv_home_state
  failed_when: lv_home_state.rc > 1
  changed_when: false

- block: # when home logical volume doesn't exist
  - name: Create home logical volume
    community.general.lvol:
      vg: "{{ crypt_volume_group_name }}"
      lv: home
      size: 100%VG

  - name: Create a ext4 filesystem on root
    ansible.builtin.filesystem:
      fstype: ext4
      dev: "/dev/{{ crypt_volume_group_name }}/home"
  when: lv_home_state.rc == 1

- name: Mount boot partitions
  ansible.posix.mount:
    src: "{{ mount_partitions.source }}"
    path: "{{ mount_partitions.dest }}"
    fstype: ext4
    state: mounted
  loop:
    - { source: "/dev/{{ crypt_volume_group_name }}/root", dest: /mnt }
    - { source: "/dev/{{ crypt_volume_group_name }}/home", dest: /mnt/home }
    - { source: "/dev/{{ disk_scheme.device }}{{ disk_scheme.boot_part.partition }}", dest: /mnt/boot }
  loop_control:
    loop_var: mount_partitions

- name: Run swapon
  ansible.builtin.command: swapon "/dev/{{ crypt_volume_group_name }}/swap"
  when: create_swap_lv.changed is true
